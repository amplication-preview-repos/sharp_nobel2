/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Page as PrismaPage,
  Component as PrismaComponent,
  Website as PrismaWebsite,
} from "@prisma/client";

export class PageServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PageCountArgs, "select">): Promise<number> {
    return this.prisma.page.count(args);
  }

  async pages<T extends Prisma.PageFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageFindManyArgs>
  ): Promise<PrismaPage[]> {
    return this.prisma.page.findMany<Prisma.PageFindManyArgs>(args);
  }
  async page<T extends Prisma.PageFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageFindUniqueArgs>
  ): Promise<PrismaPage | null> {
    return this.prisma.page.findUnique(args);
  }
  async createPage<T extends Prisma.PageCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageCreateArgs>
  ): Promise<PrismaPage> {
    return this.prisma.page.create<T>(args);
  }
  async updatePage<T extends Prisma.PageUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageUpdateArgs>
  ): Promise<PrismaPage> {
    return this.prisma.page.update<T>(args);
  }
  async deletePage<T extends Prisma.PageDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PageDeleteArgs>
  ): Promise<PrismaPage> {
    return this.prisma.page.delete(args);
  }

  async findComponents(
    parentId: string,
    args: Prisma.ComponentFindManyArgs
  ): Promise<PrismaComponent[]> {
    return this.prisma.page
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .components(args);
  }

  async getWebsite(parentId: string): Promise<PrismaWebsite | null> {
    return this.prisma.page
      .findUnique({
        where: { id: parentId },
      })
      .website();
  }
}
