/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FontService } from "../font.service";
import { FontCreateInput } from "./FontCreateInput";
import { Font } from "./Font";
import { FontFindManyArgs } from "./FontFindManyArgs";
import { FontWhereUniqueInput } from "./FontWhereUniqueInput";
import { FontUpdateInput } from "./FontUpdateInput";

export class FontControllerBase {
  constructor(protected readonly service: FontService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Font })
  async createFont(@common.Body() data: FontCreateInput): Promise<Font> {
    return await this.service.createFont({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Font] })
  @ApiNestedQuery(FontFindManyArgs)
  async fonts(@common.Req() request: Request): Promise<Font[]> {
    const args = plainToClass(FontFindManyArgs, request.query);
    return this.service.fonts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Font })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async font(
    @common.Param() params: FontWhereUniqueInput
  ): Promise<Font | null> {
    const result = await this.service.font({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Font })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFont(
    @common.Param() params: FontWhereUniqueInput,
    @common.Body() data: FontUpdateInput
  ): Promise<Font | null> {
    try {
      return await this.service.updateFont({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Font })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFont(
    @common.Param() params: FontWhereUniqueInput
  ): Promise<Font | null> {
    try {
      return await this.service.deleteFont({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
