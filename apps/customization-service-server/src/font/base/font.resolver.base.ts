/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Font } from "./Font";
import { FontCountArgs } from "./FontCountArgs";
import { FontFindManyArgs } from "./FontFindManyArgs";
import { FontFindUniqueArgs } from "./FontFindUniqueArgs";
import { CreateFontArgs } from "./CreateFontArgs";
import { UpdateFontArgs } from "./UpdateFontArgs";
import { DeleteFontArgs } from "./DeleteFontArgs";
import { FontService } from "../font.service";
@graphql.Resolver(() => Font)
export class FontResolverBase {
  constructor(protected readonly service: FontService) {}

  async _fontsMeta(
    @graphql.Args() args: FontCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Font])
  async fonts(@graphql.Args() args: FontFindManyArgs): Promise<Font[]> {
    return this.service.fonts(args);
  }

  @graphql.Query(() => Font, { nullable: true })
  async font(@graphql.Args() args: FontFindUniqueArgs): Promise<Font | null> {
    const result = await this.service.font(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Font)
  async createFont(@graphql.Args() args: CreateFontArgs): Promise<Font> {
    return await this.service.createFont({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Font)
  async updateFont(@graphql.Args() args: UpdateFontArgs): Promise<Font | null> {
    try {
      return await this.service.updateFont({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Font)
  async deleteFont(@graphql.Args() args: DeleteFontArgs): Promise<Font | null> {
    try {
      return await this.service.deleteFont(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
