/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Font as PrismaFont } from "@prisma/client";

export class FontServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FontCountArgs, "select">): Promise<number> {
    return this.prisma.font.count(args);
  }

  async fonts<T extends Prisma.FontFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontFindManyArgs>
  ): Promise<PrismaFont[]> {
    return this.prisma.font.findMany<Prisma.FontFindManyArgs>(args);
  }
  async font<T extends Prisma.FontFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontFindUniqueArgs>
  ): Promise<PrismaFont | null> {
    return this.prisma.font.findUnique(args);
  }
  async createFont<T extends Prisma.FontCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontCreateArgs>
  ): Promise<PrismaFont> {
    return this.prisma.font.create<T>(args);
  }
  async updateFont<T extends Prisma.FontUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontUpdateArgs>
  ): Promise<PrismaFont> {
    return this.prisma.font.update<T>(args);
  }
  async deleteFont<T extends Prisma.FontDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FontDeleteArgs>
  ): Promise<PrismaFont> {
    return this.prisma.font.delete(args);
  }
}
